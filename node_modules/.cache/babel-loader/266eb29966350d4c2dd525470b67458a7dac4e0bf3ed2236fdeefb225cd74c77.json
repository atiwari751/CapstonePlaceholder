{"ast":null,"code":"var _jsxFileName = \"/Users/shriti/Downloads/CapstoneProj/FreshCode/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SchemeGrid from './components/SchemeGrid';\nimport AgentSession from './components/AgentSession';\n// Import mock data from service instead of hardcoding\nimport { getAllSchemes } from './services/mockSchemeData';\n\n// API URL for the backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8001\"; // FastAPI backend URL\n\nfunction App() {\n  _s();\n  // State for schemes/cuboids\n  const [schemes, setSchemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Agent state\n  const [userPrompt, setUserPrompt] = useState('');\n  const [sessionId, setSessionId] = useState(null);\n  const [sessionStatus, setSessionStatus] = useState('idle');\n  const [sessionResults, setSessionResults] = useState({});\n  const [finalAnswer, setFinalAnswer] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [pollingActive, setPollingActive] = useState(false);\n\n  // Load schemes on component mount\n  useEffect(() => {\n    // Only load mock schemes if there's no active session\n    if (!sessionId) {\n      try {\n        // Don't load any schemes initially - wait for agent results\n        setSchemes([]);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading schemes:\", err);\n        setError(\"Failed to load schemes. Please try again later.\");\n        setLoading(false);\n      }\n    }\n  }, [sessionId]);\n\n  // Poll results function with useCallback to avoid dependency issues\n  const pollResults = useCallback(async () => {\n    if (!sessionId || !pollingActive) return false;\n    try {\n      const response = await axios.get(`${API_URL}/session/${sessionId}`);\n      const data = response.data;\n\n      // Update results\n      setSessionResults(data.results || {});\n\n      // Update final answer\n      if (data.final_answer) {\n        setFinalAnswer(data.final_answer);\n      }\n\n      // Update schemes - completely replace any existing schemes\n      if (data.schemes && Array.isArray(data.schemes)) {\n        console.log(\"Received schemes:\", data.schemes);\n        setSchemes(data.schemes);\n      }\n\n      // Check if processing is complete\n      if (data.status === \"completed\" || data.status === \"error\") {\n        setPollingActive(false);\n        setSessionStatus(data.status);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error polling results:\", error);\n      setError(\"Failed to get results. Please try again.\");\n      setPollingActive(false);\n      return true;\n    }\n  }, [sessionId, pollingActive]);\n\n  // Set up polling effect\n  useEffect(() => {\n    let interval;\n    if (pollingActive) {\n      interval = setInterval(() => {\n        pollResults();\n      }, 1000); // Poll every second\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [pollingActive, sessionId, pollResults]);\n\n  // Handle user prompt submission\n  const handlePromptSubmit = async e => {\n    e.preventDefault();\n    if (!userPrompt.trim() || isProcessing) return;\n    setIsProcessing(true);\n    try {\n      // Try to connect to the real API\n      const response = await axios.post(`${API_URL}/query`, {\n        query: userPrompt\n      });\n      const data = response.data;\n      setSessionId(data.session_id);\n      setPollingActive(true);\n      setSessionStatus('running');\n      setSessionResults({});\n      setFinalAnswer(null);\n\n      // Clear existing schemes when starting a new query\n      // We'll get new schemes from the agent API\n      setSchemes([]);\n    } catch (error) {\n      console.error(\"Error processing query:\", error);\n\n      // Fallback to mock data if API is not available\n      console.log(\"Using mock data instead\");\n\n      // Load mock schemes from the service\n      const mockSchemes = getAllSchemes();\n      setSchemes(mockSchemes);\n\n      // Create a unique session ID\n      setSessionId(\"mock-session-\" + Date.now());\n      setSessionStatus('completed');\n\n      // Use empty results instead of hardcoded mock data\n      setSessionResults({});\n      setFinalAnswer(\"This is a mock response. The API server appears to be offline.\");\n      setIsProcessing(false);\n    }\n\n    // Clear the input field\n    setUserPrompt('');\n  };\n\n  // Handle starting a new query\n  const handleNewQuery = () => {\n    setSessionId(null);\n    setSessionStatus('idle');\n    setSessionResults({});\n    setFinalAnswer(null);\n    setPollingActive(false);\n    setIsProcessing(false);\n\n    // Clear schemes instead of loading mock data\n    setSchemes([]);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading schemes...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"split-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vis-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"3D Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click on a scheme to view its details in a side panel. Click and drag to rotate, scroll to zoom.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"visualization-content\",\n          children: /*#__PURE__*/_jsxDEV(SchemeGrid, {\n            schemes: schemes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"agent-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agent-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"AGENT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agent-content\",\n          children: sessionId ? /*#__PURE__*/_jsxDEV(AgentSession, {\n            sessionId: sessionId,\n            status: sessionStatus,\n            results: sessionResults,\n            finalAnswer: finalAnswer,\n            onNewQuery: handleNewQuery\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"agent-placeholder\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Enter a prompt below to start a new session.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Try queries like \\\"show me a house\\\" or \\\"design an office building\\\".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-input-area\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handlePromptSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: userPrompt,\n              onChange: e => setUserPrompt(e.target.value),\n              placeholder: \"Enter your prompt here...\",\n              disabled: isProcessing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              disabled: isProcessing || !userPrompt.trim(),\n              children: isProcessing ? \"Processing...\" : \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+AicwKGIN9394kS3VUYJiVz64gg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","SchemeGrid","AgentSession","getAllSchemes","jsxDEV","_jsxDEV","API_URL","App","_s","schemes","setSchemes","loading","setLoading","error","setError","userPrompt","setUserPrompt","sessionId","setSessionId","sessionStatus","setSessionStatus","sessionResults","setSessionResults","finalAnswer","setFinalAnswer","isProcessing","setIsProcessing","pollingActive","setPollingActive","err","console","pollResults","response","get","data","results","final_answer","Array","isArray","log","status","interval","setInterval","clearInterval","handlePromptSubmit","e","preventDefault","trim","post","query","session_id","mockSchemes","Date","now","handleNewQuery","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onNewQuery","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/shriti/Downloads/CapstoneProj/FreshCode/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SchemeGrid from './components/SchemeGrid';\nimport AgentSession from './components/AgentSession';\n// Import mock data from service instead of hardcoding\nimport { getAllSchemes } from './services/mockSchemeData';\n\n// API URL for the backend\nconst API_URL = \"http://localhost:8001\"; // FastAPI backend URL\n\n\n\nfunction App() {\n  // State for schemes/cuboids\n  const [schemes, setSchemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Agent state\n  const [userPrompt, setUserPrompt] = useState('');\n  const [sessionId, setSessionId] = useState(null);\n  const [sessionStatus, setSessionStatus] = useState('idle');\n  const [sessionResults, setSessionResults] = useState({});\n  const [finalAnswer, setFinalAnswer] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [pollingActive, setPollingActive] = useState(false);\n\n  // Load schemes on component mount\n  useEffect(() => {\n    // Only load mock schemes if there's no active session\n    if (!sessionId) {\n      try {\n        // Don't load any schemes initially - wait for agent results\n        setSchemes([]);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading schemes:\", err);\n        setError(\"Failed to load schemes. Please try again later.\");\n        setLoading(false);\n      }\n    }\n  }, [sessionId]);\n\n  // Poll results function with useCallback to avoid dependency issues\n  const pollResults = useCallback(async () => {\n    if (!sessionId || !pollingActive) return false;\n    \n    try {\n      const response = await axios.get(`${API_URL}/session/${sessionId}`);\n      const data = response.data;\n      \n      // Update results\n      setSessionResults(data.results || {});\n      \n      // Update final answer\n      if (data.final_answer) {\n        setFinalAnswer(data.final_answer);\n      }\n      \n      // Update schemes - completely replace any existing schemes\n      if (data.schemes && Array.isArray(data.schemes)) {\n        console.log(\"Received schemes:\", data.schemes);\n        setSchemes(data.schemes);\n      }\n      \n      // Check if processing is complete\n      if (data.status === \"completed\" || data.status === \"error\") {\n        setPollingActive(false);\n        setSessionStatus(data.status);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(\"Error polling results:\", error);\n      setError(\"Failed to get results. Please try again.\");\n      setPollingActive(false);\n      return true;\n    }\n  }, [sessionId, pollingActive]);\n\n  // Set up polling effect\n  useEffect(() => {\n    let interval;\n    \n    if (pollingActive) {\n      interval = setInterval(() => {\n        pollResults();\n      }, 1000); // Poll every second\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [pollingActive, sessionId, pollResults]);\n\n  // Handle user prompt submission\n  const handlePromptSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!userPrompt.trim() || isProcessing) return;\n    \n    setIsProcessing(true);\n    \n    try {\n      // Try to connect to the real API\n      const response = await axios.post(`${API_URL}/query`, { query: userPrompt });\n      const data = response.data;\n      \n      setSessionId(data.session_id);\n      setPollingActive(true);\n      setSessionStatus('running');\n      setSessionResults({});\n      setFinalAnswer(null);\n      \n      // Clear existing schemes when starting a new query\n      // We'll get new schemes from the agent API\n      setSchemes([]);\n    } catch (error) {\n      console.error(\"Error processing query:\", error);\n      \n      // Fallback to mock data if API is not available\n      console.log(\"Using mock data instead\");\n      \n      // Load mock schemes from the service\n      const mockSchemes = getAllSchemes();\n      setSchemes(mockSchemes);\n      \n      // Create a unique session ID\n      setSessionId(\"mock-session-\" + Date.now());\n      setSessionStatus('completed');\n      \n      // Use empty results instead of hardcoded mock data\n      setSessionResults({});\n      setFinalAnswer(\"This is a mock response. The API server appears to be offline.\");\n      setIsProcessing(false);\n    }\n    \n    // Clear the input field\n    setUserPrompt('');\n  };\n  \n  // Handle starting a new query\n  const handleNewQuery = () => {\n    setSessionId(null);\n    setSessionStatus('idle');\n    setSessionResults({});\n    setFinalAnswer(null);\n    setPollingActive(false);\n    setIsProcessing(false);\n    \n    // Clear schemes instead of loading mock data\n    setSchemes([]);\n  };\n\n\n\n  if (loading) {\n    return <div className=\"loading\">Loading schemes...</div>;\n  }\n\n  if (error) {\n    return <div className=\"loading\">{error}</div>;\n  }\n\n  return (\n    <div className=\"app-container\">\n      {/* Split layout with visualization area and agent area */}\n      <div className=\"split-layout\">\n        {/* Visualization Area (Left Side) */}\n        <div className=\"visualization-area\">\n          <div className=\"vis-header\">\n            <h3>3D Visualization</h3>\n            <p>Click on a scheme to view its details in a side panel. Click and drag to rotate, scroll to zoom.</p>\n          </div>\n          \n          {/* Add scrollable container */}\n          <div className=\"visualization-content\">\n            {/* Use the SchemeGrid component */}\n            <SchemeGrid schemes={schemes} />\n          </div>\n        </div>\n        \n        {/* Agent Area (Right Side) */}\n        <div className=\"agent-area\">\n          <div className=\"agent-header\">\n            <h2>AGENT</h2>\n          </div>\n          \n          <div className=\"agent-content\">\n            {sessionId ? (\n              <AgentSession\n                sessionId={sessionId}\n                status={sessionStatus}\n                results={sessionResults}\n                finalAnswer={finalAnswer}\n                onNewQuery={handleNewQuery}\n              />\n            ) : (\n              <div className=\"agent-placeholder\">\n                <p>Enter a prompt below to start a new session.</p>\n                <p>Try queries like \"show me a house\" or \"design an office building\".</p>\n              </div>\n            )}\n          </div>\n          \n          {/* User Input Area */}\n          <div className=\"user-input-area\">\n            <form onSubmit={handlePromptSubmit}>\n              <input\n                type=\"text\"\n                value={userPrompt}\n                onChange={(e) => setUserPrompt(e.target.value)}\n                placeholder=\"Enter your prompt here...\"\n                disabled={isProcessing}\n              />\n              <button type=\"submit\" disabled={isProcessing || !userPrompt.trim()}>\n                {isProcessing ? \"Processing...\" : \"Send\"}\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}