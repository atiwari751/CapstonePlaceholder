{"ast":null,"code":"var _jsxFileName = \"/Users/shriti/Downloads/CapstoneProj/FreshCode/src/components/CuboidModel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CuboidModel = ({\n  width = 1,\n  height = 1,\n  depth = 1,\n  position = [0, 0, 0],\n  color = \"#4287f5\"\n}) => {\n  _s();\n  // Debug log for CuboidModel props\n  console.log(\"CuboidModel props:\", {\n    width,\n    height,\n    depth,\n    position,\n    color\n  });\n  const meshRef = useRef();\n  const [hovered, setHovered] = useState(false);\n  const [clicked, setClicked] = useState(false);\n\n  // Simple animation - gentle floating effect\n  useFrame(state => {\n    if (meshRef.current) {\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n      if (clicked) {\n        // Rotate when clicked\n        meshRef.current.rotation.y += 0.02;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: position,\n    scale: clicked ? 1.1 : 1,\n    onClick: () => setClicked(!clicked),\n    onPointerOver: () => setHovered(true),\n    onPointerOut: () => setHovered(false),\n    castShadow: true,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [width, height, depth]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? '#ffffff' : color,\n      metalness: 0.5,\n      roughness: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(CuboidModel, \"4z8pbZs+PSUH9bdhvuJ27OrAoFM=\", false, function () {\n  return [useFrame];\n});\n_c = CuboidModel;\nexport default CuboidModel;\nvar _c;\n$RefreshReg$(_c, \"CuboidModel\");","map":{"version":3,"names":["React","useRef","useState","useFrame","jsxDEV","_jsxDEV","CuboidModel","width","height","depth","position","color","_s","console","log","meshRef","hovered","setHovered","clicked","setClicked","state","current","y","Math","sin","clock","elapsedTime","rotation","ref","scale","onClick","onPointerOver","onPointerOut","castShadow","children","args","fileName","_jsxFileName","lineNumber","columnNumber","metalness","roughness","_c","$RefreshReg$"],"sources":["/Users/shriti/Downloads/CapstoneProj/FreshCode/src/components/CuboidModel.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\n\nconst CuboidModel = ({ width = 1, height = 1, depth = 1, position = [0, 0, 0], color = \"#4287f5\" }) => {\n  // Debug log for CuboidModel props\n  console.log(\"CuboidModel props:\", { width, height, depth, position, color });\n  \n  const meshRef = useRef();\n  const [hovered, setHovered] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  \n  // Simple animation - gentle floating effect\n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\n      \n      if (clicked) {\n        // Rotate when clicked\n        meshRef.current.rotation.y += 0.02;\n      }\n    }\n  });\n  \n  return (\n    <mesh\n      ref={meshRef}\n      position={position}\n      scale={clicked ? 1.1 : 1}\n      onClick={() => setClicked(!clicked)}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n      castShadow\n    >\n      <boxGeometry args={[width, height, depth]} />\n      <meshStandardMaterial \n        color={hovered ? '#ffffff' : color} \n        metalness={0.5}\n        roughness={0.2}\n      />\n    </mesh>\n  );\n};\n\nexport default CuboidModel; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,GAAGA,CAAC;EAAEC,KAAK,GAAG,CAAC;EAAEC,MAAM,GAAG,CAAC;EAAEC,KAAK,GAAG,CAAC;EAAEC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAAEC,KAAK,GAAG;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrG;EACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;IAAEP,KAAK;IAAEC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAM,CAAC,CAAC;EAE5E,MAAMI,OAAO,GAAGd,MAAM,CAAC,CAAC;EACxB,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAC,QAAQ,CAAEiB,KAAK,IAAK;IAClB,IAAIL,OAAO,CAACM,OAAO,EAAE;MACnBN,OAAO,CAACM,OAAO,CAACX,QAAQ,CAACY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,GAAGa,IAAI,CAACC,GAAG,CAACJ,KAAK,CAACK,KAAK,CAACC,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG;MAExF,IAAIR,OAAO,EAAE;QACX;QACAH,OAAO,CAACM,OAAO,CAACM,QAAQ,CAACL,CAAC,IAAI,IAAI;MACpC;IACF;EACF,CAAC,CAAC;EAEF,oBACEjB,OAAA;IACEuB,GAAG,EAAEb,OAAQ;IACbL,QAAQ,EAAEA,QAAS;IACnBmB,KAAK,EAAEX,OAAO,GAAG,GAAG,GAAG,CAAE;IACzBY,OAAO,EAAEA,CAAA,KAAMX,UAAU,CAAC,CAACD,OAAO,CAAE;IACpCa,aAAa,EAAEA,CAAA,KAAMd,UAAU,CAAC,IAAI,CAAE;IACtCe,YAAY,EAAEA,CAAA,KAAMf,UAAU,CAAC,KAAK,CAAE;IACtCgB,UAAU;IAAAC,QAAA,gBAEV7B,OAAA;MAAa8B,IAAI,EAAE,CAAC5B,KAAK,EAAEC,MAAM,EAAEC,KAAK;IAAE;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7ClC,OAAA;MACEM,KAAK,EAAEK,OAAO,GAAG,SAAS,GAAGL,KAAM;MACnC6B,SAAS,EAAE,GAAI;MACfC,SAAS,EAAE;IAAI;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAAC3B,EAAA,CAtCIN,WAAW;EAAA,QASfH,QAAQ;AAAA;AAAAuC,EAAA,GATJpC,WAAW;AAwCjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}