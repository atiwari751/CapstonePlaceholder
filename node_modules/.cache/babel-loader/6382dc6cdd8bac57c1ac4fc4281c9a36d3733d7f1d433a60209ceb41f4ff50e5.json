{"ast":null,"code":"var _jsxFileName = \"/Users/shriti/Downloads/CapstoneProj/FreshCode/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport AgentSession from './components/AgentSession'; // Component to show agent's work\n// Import mock data from service instead of hardcoding\nimport ChatMessage from './components/ChatMessage'; // Component to render a single chat message\nimport SchemeGrid from './components/SchemeGrid'; // Component for 3D visualization\n\n// API URL for the backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8001\"; // FastAPI backend URL\n\nfunction App() {\n  _s();\n  // State for schemes/cuboids\n  const [schemes, setSchemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Agent state\n  const [currentPrompt, setCurrentPrompt] = useState('');\n  const [sessionId, setSessionId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [pollingActive, setPollingActive] = useState(false);\n\n  // Load schemes on component mount\n  useEffect(() => {\n    // Only load mock schemes if there's no active session\n    if (!sessionId) {\n      try {\n        setSchemes([]); // Start with no schemes\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading schemes:\", err);\n        setError(\"Failed to load schemes. Please try again later.\");\n        setLoading(false);\n      }\n    }\n  }, [sessionId]);\n\n  // Poll results function with useCallback to avoid dependency issues\n  const pollResults = useCallback(async () => {\n    if (!sessionId || !pollingActive) return false;\n    try {\n      const response = await axios.get(`${API_URL}/session/${sessionId}`);\n      const data = response.data;\n\n      // Update the last message in chat history if it's an agent turn\n      setChatHistory(prev => {\n        const lastMessage = prev[prev.length - 1];\n        if (lastMessage && lastMessage.type === 'agent') {\n          // Create a new message object to ensure re-render\n          const updatedMessage = {\n            ...lastMessage,\n            status: data.status,\n            results: data.results || {},\n            finalAnswer: data.final_answer\n          };\n          return [...prev.slice(0, -1), updatedMessage];\n        }\n        return prev;\n      });\n\n      // Update schemes - completely replace any existing schemes\n      // This state is separate and persists until a new chat starts.\n      if (data.schemes && Array.isArray(data.schemes)) {\n        // Ensure each scheme has a display-friendly name for the grid\n        const namedSchemes = data.schemes.map((scheme, index) => ({\n          ...scheme,\n          displayName: scheme.name || `Scheme ${index + 1}`\n        }));\n        setSchemes(namedSchemes);\n      }\n\n      // Check if processing is complete\n      if (data.status === \"completed\" || data.status === \"error\") {\n        setPollingActive(false);\n        setIsProcessing(false); // Re-enable input when polling stops\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error polling results:\", error);\n      setError(\"Failed to get results. Please try again.\");\n      setPollingActive(false);\n      setIsProcessing(false); // Re-enable input on error\n      return true;\n    }\n  }, [sessionId, pollingActive]);\n\n  // Set up polling effect\n  useEffect(() => {\n    let interval;\n    if (pollingActive) {\n      interval = setInterval(() => {\n        pollResults();\n      }, 1000); // Poll every second\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [pollingActive, sessionId, pollResults]);\n\n  // Handle user prompt submission\n  const handlePromptSubmit = async e => {\n    e.preventDefault();\n    const prompt = currentPrompt.trim();\n    if (!prompt || isProcessing) return;\n    setIsProcessing(true);\n\n    // Add user's prompt and a placeholder for the agent's response to the history\n    setChatHistory(prev => [...prev, {\n      type: 'human',\n      content: prompt\n    }, {\n      type: 'agent',\n      sessionId: sessionId,\n      status: 'running',\n      results: {},\n      finalAnswer: null\n    } // Placeholder\n    ]);\n    try {\n      // If we have a session ID, send it to continue the conversation.\n      // Otherwise, the backend will create a new session.\n      const payload = {\n        query: prompt\n      };\n      if (sessionId) {\n        payload.session_id = sessionId;\n      }\n      const response = await axios.post(`${API_URL}/query`, payload);\n      const data = response.data;\n      setSessionId(data.session_id);\n      setPollingActive(true);\n    } catch (error) {\n      console.error(\"Error processing query:\", error);\n      const errorMessage = \"An error occurred. The API server may be offline.\";\n      setError(errorMessage);\n      setChatHistory(prev => [...prev, {\n        type: 'ai',\n        content: errorMessage\n      }]);\n      setIsProcessing(false);\n      setPollingActive(false);\n    }\n\n    // Clear the input field\n    setCurrentPrompt('');\n  };\n\n  // Handle starting a new query\n  const handleNewQuery = () => {\n    setSessionId(null);\n    setPollingActive(false);\n    setIsProcessing(false);\n    setChatHistory([]);\n    setSchemes([]);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading schemes...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"split-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vis-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"3D Visualization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click on a scheme to view its details in a side panel. Click and drag to rotate, scroll to zoom.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"visualization-content\",\n          children: /*#__PURE__*/_jsxDEV(SchemeGrid, {\n            schemes: schemes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"agent-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agent-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"AGENT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agent-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-log\",\n            children: chatHistory.map((msg, index) => {\n              if (msg.type === 'human') {\n                return /*#__PURE__*/_jsxDEV(ChatMessage, {\n                  message: msg\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 26\n                }, this);\n              }\n              if (msg.type === 'agent') {\n                // Render the agent's work, including intermediate steps and final answer\n                return /*#__PURE__*/_jsxDEV(AgentSession, {\n                  sessionId: sessionId,\n                  status: msg.status,\n                  results: msg.results,\n                  finalAnswer: msg.finalAnswer\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 26\n                }, this);\n              }\n              return null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-input-area\",\n          children: [sessionId && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"new-query-button\",\n            onClick: handleNewQuery,\n            disabled: isProcessing,\n            children: \"New Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handlePromptSubmit,\n            className: \"chat-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: currentPrompt,\n              onChange: e => setCurrentPrompt(e.target.value),\n              placeholder: \"Enter your prompt here...\",\n              disabled: isProcessing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              disabled: isProcessing || !currentPrompt.trim(),\n              children: isProcessing ? \"Processing...\" : \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E9NIGdLSNrsaVMeohsDHi99KhWk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","AgentSession","ChatMessage","SchemeGrid","jsxDEV","_jsxDEV","API_URL","App","_s","schemes","setSchemes","loading","setLoading","error","setError","currentPrompt","setCurrentPrompt","sessionId","setSessionId","isProcessing","setIsProcessing","chatHistory","setChatHistory","pollingActive","setPollingActive","err","console","pollResults","response","get","data","prev","lastMessage","length","type","updatedMessage","status","results","finalAnswer","final_answer","slice","Array","isArray","namedSchemes","map","scheme","index","displayName","name","interval","setInterval","clearInterval","handlePromptSubmit","e","preventDefault","prompt","trim","content","payload","query","session_id","post","errorMessage","handleNewQuery","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","message","onClick","disabled","onSubmit","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/shriti/Downloads/CapstoneProj/FreshCode/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport AgentSession from './components/AgentSession'; // Component to show agent's work\n// Import mock data from service instead of hardcoding\nimport ChatMessage from './components/ChatMessage'; // Component to render a single chat message\nimport SchemeGrid from './components/SchemeGrid'; // Component for 3D visualization\n\n// API URL for the backend\nconst API_URL = \"http://localhost:8001\"; // FastAPI backend URL\n\nfunction App() {\n  // State for schemes/cuboids\n  const [schemes, setSchemes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Agent state\n  const [currentPrompt, setCurrentPrompt] = useState('');\n  const [sessionId, setSessionId] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [pollingActive, setPollingActive] = useState(false);\n\n  // Load schemes on component mount\n  useEffect(() => {\n    // Only load mock schemes if there's no active session\n    if (!sessionId) {\n      try {\n        setSchemes([]); // Start with no schemes\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading schemes:\", err);\n        setError(\"Failed to load schemes. Please try again later.\");\n        setLoading(false);\n      }\n    }\n  }, [sessionId]);\n\n  // Poll results function with useCallback to avoid dependency issues\n  const pollResults = useCallback(async () => {\n    if (!sessionId || !pollingActive) return false;\n    \n    try {\n      const response = await axios.get(`${API_URL}/session/${sessionId}`);\n      const data = response.data;\n      \n      // Update the last message in chat history if it's an agent turn\n      setChatHistory(prev => {\n        const lastMessage = prev[prev.length - 1];\n        if (lastMessage && lastMessage.type === 'agent') {\n          // Create a new message object to ensure re-render\n          const updatedMessage = {\n            ...lastMessage,\n            status: data.status,\n            results: data.results || {},\n            finalAnswer: data.final_answer\n          };\n          return [...prev.slice(0, -1), updatedMessage];\n        }\n        return prev;\n      });\n      \n      // Update schemes - completely replace any existing schemes\n      // This state is separate and persists until a new chat starts.\n      if (data.schemes && Array.isArray(data.schemes)) {\n        // Ensure each scheme has a display-friendly name for the grid\n        const namedSchemes = data.schemes.map((scheme, index) => ({\n          ...scheme,\n          displayName: scheme.name || `Scheme ${index + 1}`\n        }));\n        setSchemes(namedSchemes);\n      }\n      \n      // Check if processing is complete\n      if (data.status === \"completed\" || data.status === \"error\") {\n        setPollingActive(false);\n        setIsProcessing(false); // Re-enable input when polling stops\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(\"Error polling results:\", error);\n      setError(\"Failed to get results. Please try again.\");\n      setPollingActive(false);\n      setIsProcessing(false); // Re-enable input on error\n      return true;\n    }\n  }, [sessionId, pollingActive]);\n\n  // Set up polling effect\n  useEffect(() => {\n    let interval;\n    \n    if (pollingActive) {\n      interval = setInterval(() => {\n        pollResults();\n      }, 1000); // Poll every second\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [pollingActive, sessionId, pollResults]);\n\n  // Handle user prompt submission\n  const handlePromptSubmit = async (e) => {\n    e.preventDefault();\n    \n    const prompt = currentPrompt.trim();\n    if (!prompt || isProcessing) return;\n    \n    setIsProcessing(true);\n\n    // Add user's prompt and a placeholder for the agent's response to the history\n    setChatHistory(prev => [\n      ...prev, \n      { type: 'human', content: prompt },\n      { type: 'agent', sessionId: sessionId, status: 'running', results: {}, finalAnswer: null } // Placeholder\n    ]);\n    \n    try {\n      // If we have a session ID, send it to continue the conversation.\n      // Otherwise, the backend will create a new session.\n      const payload = { query: prompt };\n      if (sessionId) {\n        payload.session_id = sessionId;\n      }\n\n      const response = await axios.post(`${API_URL}/query`, payload);\n      const data = response.data;\n      \n      setSessionId(data.session_id);\n      setPollingActive(true);\n\n    } catch (error) {\n      console.error(\"Error processing query:\", error);\n      const errorMessage = \"An error occurred. The API server may be offline.\";\n      setError(errorMessage);\n      setChatHistory(prev => [...prev, { type: 'ai', content: errorMessage }]);\n      setIsProcessing(false);\n      setPollingActive(false);\n    }\n    \n    // Clear the input field\n    setCurrentPrompt('');\n  };\n  \n  // Handle starting a new query\n  const handleNewQuery = () => {\n    setSessionId(null);\n    setPollingActive(false);\n    setIsProcessing(false);\n    setChatHistory([]);\n    setSchemes([]);\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading schemes...</div>;\n  }\n\n  if (error) {\n    return <div className=\"loading\">{error}</div>;\n  }\n\n  return (\n    <div className=\"app-container\">\n      {/* Split layout with visualization area and agent area */}\n      <div className=\"split-layout\">\n        {/* Visualization Area (Left Side) */}\n        <div className=\"visualization-area\">\n          <div className=\"vis-header\">\n            <h3>3D Visualization</h3>\n            <p>Click on a scheme to view its details in a side panel. Click and drag to rotate, scroll to zoom.</p>\n          </div>\n          \n          {/* Add scrollable container */}\n          <div className=\"visualization-content\">\n            {/* Use the SchemeGrid component */}\n            <SchemeGrid schemes={schemes} />\n          </div>\n        </div>\n        \n        {/* Agent Area (Right Side) */}\n        <div className=\"agent-area\">\n          <div className=\"agent-header\">\n            <h2>AGENT</h2>\n          </div>\n          \n          <div className=\"agent-content\">\n            <div className=\"chat-log\">\n              {chatHistory.map((msg, index) => {\n                if (msg.type === 'human') {\n                  return <ChatMessage key={index} message={msg} />;\n                }\n                if (msg.type === 'agent') {\n                  // Render the agent's work, including intermediate steps and final answer\n                  return <AgentSession \n                    key={index}\n                    sessionId={sessionId}\n                    status={msg.status} \n                    results={msg.results} \n                    finalAnswer={msg.finalAnswer} \n                  />;\n                }\n                return null;\n              })}\n            </div>\n          </div>\n          \n          {/* User Input Area - moved inside agent-area */}\n          <div className=\"user-input-area\">\n            {sessionId && (\n              <button className=\"new-query-button\" onClick={handleNewQuery} disabled={isProcessing}>\n                New Chat\n              </button>\n            )}\n            <form onSubmit={handlePromptSubmit} className=\"chat-form\">\n              <input\n                type=\"text\"\n                value={currentPrompt}\n                onChange={(e) => setCurrentPrompt(e.target.value)}\n                placeholder=\"Enter your prompt here...\"\n                disabled={isProcessing}\n              />\n              <button type=\"submit\" disabled={isProcessing || !currentPrompt.trim()}>\n                {isProcessing ? \"Processing...\" : \"Send\"}\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}